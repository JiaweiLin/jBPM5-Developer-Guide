/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.salaboy.jbpm5.events;

import com.salaboy.model.KeyA;
import com.salaboy.model.KeyD;
import com.salaboy.model.KeyS;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.UIManager;
import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseConfiguration;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderError;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.conf.EventProcessingOption;
import org.drools.io.impl.ClassPathResource;
import org.drools.runtime.KnowledgeSessionConfiguration;
import org.drools.runtime.StatefulKnowledgeSession;
import org.drools.runtime.conf.ClockTypeOption;

/**
 *
 * @author salaboy
 */
public class EventsTesterJFrame extends javax.swing.JFrame implements KeyListener, ActionListener{

    private StatefulKnowledgeSession ksession;
    /**
     * Creates new form EventsTesterJFrame
     */
    public EventsTesterJFrame() {
        initComponents();

        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        keyAjButton.addKeyListener(this);
        keySjButton.addKeyListener(this);
        keyDjButton.addKeyListener(this);
        keyWjButton.addKeyListener(this);
        
        ksession = createKnowledgeSession();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        keyAjButton = new javax.swing.JButton();
        keySjButton = new javax.swing.JButton();
        keyWjButton = new javax.swing.JButton();
        keyDjButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outjTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EventsTester");

        keyAjButton.setMnemonic('A');
        keyAjButton.setText("Key A");
        keyAjButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keyAjButtonKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyAjButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyAjButtonKeyReleased(evt);
            }
        });

        keySjButton.setMnemonic('S');
        keySjButton.setText("Key S");
        keySjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keySjButtonActionPerformed(evt);
            }
        });
        keySjButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keySjButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keySjButtonKeyReleased(evt);
            }
        });

        keyWjButton.setMnemonic('W');
        keyWjButton.setText("Key W");
        keyWjButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyWjButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyWjButtonKeyReleased(evt);
            }
        });

        keyDjButton.setMnemonic('D');
        keyDjButton.setText("Key D");
        keyDjButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyDjButtonKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyDjButtonKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .add(keyAjButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(keyWjButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(keySjButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(keyDjButton)
                .add(84, 84, 84))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .add(keyWjButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(keyAjButton)
                    .add(keySjButton)
                    .add(keyDjButton))
                .add(16, 16, 16))
        );

        jScrollPane1.setViewportView(outjTextPane);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 27, Short.MAX_VALUE)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void keyAjButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyAjButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_A) {
            ksession.insert(new KeyA());
            ksession.fireAllRules();
            outjTextPane.setText(outjTextPane.getText() + "\n >>> Key A Pressed!");
            keyAjButton.setBackground(new java.awt.Color(51, 255, 0));
            keyAjButton.setForeground(new java.awt.Color(51, 204, 0));
            keyAjButton.setText("[ Key A ]");
            keyAjButton.setOpaque(true);
        }
    }//GEN-LAST:event_keyAjButtonKeyPressed

    private void keySjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keySjButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keySjButtonActionPerformed

    private void keyAjButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyAjButtonKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_A) {
            keyAjButton.setBackground(new java.awt.Color(238, 238, 238));
            keyAjButton.setForeground(new java.awt.Color(0, 0, 0));
            keyAjButton.setText(" Key A ");
            keyAjButton.setOpaque(false);
        }
    }//GEN-LAST:event_keyAjButtonKeyReleased

    private void keyAjButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyAjButtonKeyTyped
        // TODO add your handling code here:
       
    }//GEN-LAST:event_keyAjButtonKeyTyped

    private void keySjButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keySjButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_S) {
            ksession.insert(new KeyS());
            ksession.fireAllRules();
            outjTextPane.setText(outjTextPane.getText() + "\n >>> Key S Pressed!");
            keySjButton.setBackground(new java.awt.Color(51, 255, 0));
            keySjButton.setForeground(new java.awt.Color(51, 204, 0));
            keySjButton.setText("[ Key S ]");
            keySjButton.setOpaque(true);
        }
    }//GEN-LAST:event_keySjButtonKeyPressed

    private void keySjButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keySjButtonKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_S) {
            keySjButton.setBackground(new java.awt.Color(238, 238, 238));
            keySjButton.setForeground(new java.awt.Color(0, 0, 0));
            keySjButton.setText(" Key S ");
            keySjButton.setOpaque(false);
        }
    }//GEN-LAST:event_keySjButtonKeyReleased

    private void keyDjButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyDjButtonKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_D) {
            keyDjButton.setBackground(new java.awt.Color(238, 238, 238));
            keyDjButton.setForeground(new java.awt.Color(0, 0, 0));
            keyDjButton.setText(" Key D ");
            keyDjButton.setOpaque(false);
        }
    }//GEN-LAST:event_keyDjButtonKeyReleased

    private void keyDjButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyDjButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_D) {
            ksession.insert(new KeyD());
            ksession.fireAllRules();
            outjTextPane.setText(outjTextPane.getText() + "\n >>> Key D Pressed!");
            keyDjButton.setBackground(new java.awt.Color(51, 255, 0));
            keyDjButton.setForeground(new java.awt.Color(51, 204, 0));
            keyDjButton.setText("[ Key D ]");
            keyDjButton.setOpaque(true);
        }
    }//GEN-LAST:event_keyDjButtonKeyPressed

    private void keyWjButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyWjButtonKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_W) {
            outjTextPane.setText(outjTextPane.getText() + "\n >>> Key W Pressed!");
            keyWjButton.setBackground(new java.awt.Color(51, 255, 0));
            keyWjButton.setForeground(new java.awt.Color(51, 204, 0));
            keyWjButton.setText("[ Key W ]");
            keyWjButton.setOpaque(true);
        }
    }//GEN-LAST:event_keyWjButtonKeyPressed

    private void keyWjButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyWjButtonKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_W) {
            keyWjButton.setBackground(new java.awt.Color(238, 238, 238));
            keyWjButton.setForeground(new java.awt.Color(0, 0, 0));
            keyWjButton.setText(" Key W ");
            keyWjButton.setOpaque(false);
        }
    }//GEN-LAST:event_keyWjButtonKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventsTesterJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventsTesterJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventsTesterJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventsTesterJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EventsTesterJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton keyAjButton;
    private javax.swing.JButton keyDjButton;
    private javax.swing.JButton keySjButton;
    private javax.swing.JButton keyWjButton;
    private javax.swing.JTextPane outjTextPane;
    // End of variables declaration//GEN-END:variables

    public void keyTyped(KeyEvent ke) {
        
    }

    public void keyPressed(KeyEvent ke) {
        
        if(ke.getKeyCode() == KeyEvent.VK_A){
            keyAjButton.requestFocus();
            keyAjButtonKeyPressed(ke);
        }
        if(ke.getKeyCode() == KeyEvent.VK_S){
            keySjButton.requestFocus();
            keySjButtonKeyPressed(ke);
        }
        if(ke.getKeyCode() == KeyEvent.VK_D){
            keyDjButton.requestFocus();
            keyDjButtonKeyPressed(ke);
        }
        if(ke.getKeyCode() == KeyEvent.VK_W){
            keyWjButton.requestFocus();
            keyWjButtonKeyPressed(ke);
        }
    }

    public void keyReleased(KeyEvent ke) {
        if(ke.getKeyCode() == KeyEvent.VK_A){
            keyAjButton.requestFocus();
            keyAjButtonKeyReleased(ke);
        }
        if(ke.getKeyCode() == KeyEvent.VK_S){
            keySjButton.requestFocus();
            keySjButtonKeyReleased(ke);
        }
        if(ke.getKeyCode() == KeyEvent.VK_D){
            keyDjButton.requestFocus();
            keyDjButtonKeyReleased(ke);
        }
        if(ke.getKeyCode() == KeyEvent.VK_W){
            keyWjButton.requestFocus();
            keyWjButtonKeyReleased(ke);
        }
    }

    public void actionPerformed(ActionEvent ae) {
        
    }
    
    private StatefulKnowledgeSession createKnowledgeSession(){
        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();

        kbuilder.add(new ClassPathResource("simpleEventAnalysis.drl"), ResourceType.DRL);
        if (kbuilder.hasErrors()) {
            for (KnowledgeBuilderError error : kbuilder.getErrors()) {
                System.out.println(">>> Error:" + error.getMessage());

            }
            throw new IllegalStateException(">>> Knowledge couldn't be parsed! ");
        }

        KnowledgeBaseConfiguration config = KnowledgeBaseFactory.newKnowledgeBaseConfiguration();
        config.setOption(EventProcessingOption.STREAM);
        
        
        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase(config);

        kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
        KnowledgeSessionConfiguration sessionConfig = KnowledgeBaseFactory.newKnowledgeSessionConfiguration();
        sessionConfig.setOption( ClockTypeOption.get("realtime") );
        return kbase.newStatefulKnowledgeSession(sessionConfig, null);
    }
}
