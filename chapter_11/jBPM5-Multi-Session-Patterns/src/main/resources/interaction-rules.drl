package com.salaboy.jbpm5.dev.guide;

import com.salaboy.model.*;
import com.salaboy.sessions.patterns.*;
import java.util.HashMap;
import java.util.Map;
import org.drools.runtime.process.ProcessInstance;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityManager;
import org.drools.persistence.jpa.*;
import org.drools.runtime.*;
import com.salaboy.patterns.KnowledgeSessionSupport;
import org.drools.runtime.process.ProcessInstance;

global EntityManager em;
global KnowledgeSessionSupport ksessionSupport;

declare ProcessForPerson
    person: Person
    pi: ProcessInstance 
    sl: SessionLocator
end

rule "Log"
    salience 10
    when
      $be:  BusinessEntity()
    then
        System.out.println(" ### Log: "+$be);
end

rule "Log ProcessForPerson"
    salience 10
    when
      $pfp:  ProcessForPerson()
    then
        System.out.println(" ### Log: "+$pfp);
end

rule "Complete Interaction When We Receive Data"
  when
    $be: BusinessEntity(active == true)
    $data: Data()
  then
    StatefulKnowledgeSession ksession = 
            ksessionSupport.loadKnowldgeSession(
                $be.getSessionId(),
                $be.getBusinessKey(),
                em);

    ksessionSupport.completeInteraction(ksession,em, $be, $data.getDataMap());

    ksession.dispose();
end


rule "Session Locator Log"
    salience 10
    when
        $sl: SessionLocator()
    then
        System.out.println(" ### Log: "+$sl);
end


rule "Choose Session and Start Process for a Person"
    when
        $sl: SessionLocator($process: props['process'] == "com.salaboy.process.AsyncInteractions")
        $p: Person()
        not(ProcessForPerson(person == $p))
    then

        StatefulKnowledgeSession ksession = 
            ksessionSupport.loadKnowldgeSession(
                $sl.getSessionId(),
                $sl.getSessionName(),
                em);


        Map<String, Object> params = new HashMap<String, Object>();
        params.put("person", $p);    
        
        ProcessInstance pi = ksession.createProcessInstance($process, params );
        //ksession.startProcessInstance(pi.getId());

        insert(new ProcessForPerson($p, pi, $sl));
        System.out.println("1 ##################################### "+pi.getId());

        
end

rule "Start Process when we have all the information"
    
    when
        $pfp: ProcessForPerson()
    then
        
        StatefulKnowledgeSession ksession = 
            ksessionSupport.loadKnowldgeSession(
                $pfp.getSl().getSessionId(),
                $pfp.getSl().getSessionName(),
                em);

        ksession.startProcessInstance($pfp.getPi().getId());
        ksession.dispose();
end